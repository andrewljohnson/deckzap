name: CI/CD

on: [push]

env:
  WEB_IMAGE: ghcr.io/nathancahill/deckzap/web
  DEBUG: 0
  PROJECT_NAME: deckzap
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  SQL_ENGINE: django.db.backends.postgresql_psycopg2
  SQL_DATABASE: ${{ secrets.SQL_DATABASE }}
  SQL_USER: ${{ secrets.SQL_USER }}
  SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
  SQL_HOST: ${{ secrets.SQL_HOST }}
  SQL_PORT: ${{ secrets.SQL_PORT }}
  DATABASE: postgres
  AMPLITUDE_API_KEY: ${{ secrets.AMPLITUDE_API_KEY }}
  PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    if: endsWith(github.ref, '/main')
    steps:
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Log in to GitHub Packages
        run: echo ${PERSONAL_ACCESS_TOKEN} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin
      - name: Pull images
        run: |
          docker pull ${{ env.WEB_IMAGE }} || true
      - name: Add environment variables to .env
        run: |
          "${GITHUB_WORKSPACE}/generate-env.sh"
      - name: Build images
        run: |
          docker-compose -f docker-compose.ci.yml build
      - name: Push images
        run: |
          docker push ${{ env.WEB_IMAGE }}

  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Log in to GitHub Packages
        run: echo ${PERSONAL_ACCESS_TOKEN} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin
      - name: Pull images
        run: |
          docker pull ${{ env.WEB_IMAGE }} || true
      - name: Add environment variables to .env
        run: |
          "${GITHUB_WORKSPACE}/generate-env.sh"
      - name: Run tests
        run: |
          docker-compose -f docker-compose.ci.yml run --rm web python manage.py test --noinput

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout branch
        uses: actions/checkout@v1
      - name: Add environment variables to .env
        run: |
          "${GITHUB_WORKSPACE}/generate-env.sh"
          echo WEB_IMAGE=${{ env.WEB_IMAGE }} >> .env
          echo NAMESPACE=${{ secrets.NAMESPACE }} >> .env
          echo PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }} >> .env
      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
      - name: Deploy images to DigitalOcean
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp  -o StrictHostKeyChecking=no -r ./.env ./docker-compose.prod.yml root@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }}:/app
          ssh -o StrictHostKeyChecking=no root@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }} << 'ENDSSH'
            cd /app
            source .env
            docker login ghcr.io -u $NAMESPACE -p $PERSONAL_ACCESS_TOKEN
            docker pull $WEB_IMAGE
            docker-compose -f docker-compose.prod.yml up -d
          ENDSSH
